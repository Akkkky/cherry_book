def greeting
  puts 'おはよう'
  puts 'こんばんは'
end

# 普通にメソッドを実行するとこうなる
greeting
# => おはよう
# => こんばんは

puts '------------------------------'

# メソッドの呼び出しに適当なブロックを付ける
greeting do
  puts 'こんにちは'
end
# 出力結果は変わらない
# => おはよう
# こんばんは

puts '------------------------------'

# 渡されたブロックを実行するためにはメソッド内でyieldを使う
def greeting1
  puts 'おはよう'
  # ここでブロックの処理を呼び出す
  yield
  puts 'こんばんは'
end

greeting1 do
  puts 'こんにちは'
end
# => おはよう
# こんにちは
# こんばんは

puts '------------------------------'

# ブロックなしでメソッドが呼ばれているにもかかわらず、yieldでブロックを呼び出そうとした場合はエラーが発生する
# greeting1
# => `greeting1': no block given (yield) (LocalJumpError)

# yieldはブロックに引数を渡したり、ブロックの戻り値を受け取ったりできる
# 以下は“こんにちは”という引数をブロックに渡し、ブロックの戻り値を受け取ってputsメソッドで出力するコード例
def greeting
  puts 'おはよう'
  # ブロックに引数を渡し、戻り値を受け取る
  text = yield 'こんにちは'
  # ブロックの戻り値をコンソールに出力する
  puts text
  puts 'こんばんは'
end

greeting do |text|
  # yieldで渡された文字列（"こんにちは"）を2回繰り返す
  text * 2
end

# => おはよう
# こんにちはこんにちは
# こんばんは

puts '------------------------------'

# ブロックをメソッドの引数として明示的に受け取ることもできる
# ブロックを引数として受け取る場合は、引数名の前に&を付ける

# ブロックをメソッドの引数として受け取る
def greeting(&block)
  puts 'おはよう'
  # callメソッドを使ってブロックを実行する
  text = block.call('こんにちは')
  puts text
  puts 'こんばんは'
end

greeting do |text|
  text * 2
end
# => おはよう
# こんにちはこんにちは
# こんばんは

puts '------------------------------'